//LEETCODE problem 144.

Given the root of a binary tree, return the preorder traversal of its nodes' values.

Example 1:


Input: root = [1,null,2,3]
Output: [1,2,3]
Example 2:


Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100


//Code :- 

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */

class Solution {
    private void dfs(TreeNode node,List<Integer> preorder){
        if(node==null) return;
        
        preorder.add(node.val);
        dfs(node.left,preorder);
        dfs(node.right,preorder);
    }
   
  
    
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> preorder = new ArrayList<Integer>();
        dfs(root, preorder);
        return preorder;
         
     
    }
}